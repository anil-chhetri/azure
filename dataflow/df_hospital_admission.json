{
	"name": "df_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_hospitalAdmission",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountrySources"
				},
				{
					"dataset": {
						"referenceName": "df_date",
						"type": "DatasetReference"
					},
					"name": "DateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_weekly_data",
						"type": "DatasetReference"
					},
					"name": "WeeklySink"
				},
				{
					"dataset": {
						"referenceName": "ds_sink_dailyData",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "RemovedUnusedData"
				},
				{
					"name": "CountryLookup"
				},
				{
					"name": "RemoveDuplicateCol"
				},
				{
					"name": "splitDailyAndWeekly"
				},
				{
					"name": "AddColumn"
				},
				{
					"name": "aggDimDate"
				},
				{
					"name": "ecdcDataDimDate"
				},
				{
					"name": "PivotIndicator"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectReqColumns"
				},
				{
					"name": "selectReqCols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as string,",
				"          year_week as string,",
				"          value as string,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySources",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DateSource",
				"HospitalAdmissionSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemovedUnusedData",
				"RemovedUnusedData, CountrySources lookup(RemovedUnusedData@country == CountrySources@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CountryLookup",
				"CountryLookup select(mapColumn(",
				"          country = RemovedUnusedData@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveDuplicateCol",
				"RemoveDuplicateCol split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitDailyAndWeekly@(Weekly, Daily)",
				"DateSource derive(ecdc_year_month = year + '-W' + lpad(week_of_year, 2, '0')) ~> AddColumn",
				"AddColumn aggregate(groupBy(ecdc_year_month),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggDimDate",
				"splitDailyAndWeekly@Weekly, aggDimDate join(reported_year_week == ecdc_year_month,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> ecdcDataDimDate",
				"ecdcDataDimDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(toLong(value)),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicator",
				"splitDailyAndWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = sum(toLong(value)),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotDaily",
				"PivotIndicator sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqColumns",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          ICU_occupancy_count = {countDaily ICU occupancy},",
				"          hospital_occupancy_count = {countDaily hospital occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqCols",
				"selectReqColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          reported_week_start_date,",
				"          reported_week_end_date,",
				"          new_hospital_occupancy_count,",
				"          new_ICU_occupancy_count,",
				"          source",
				"     )) ~> WeeklySink",
				"selectReqCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}